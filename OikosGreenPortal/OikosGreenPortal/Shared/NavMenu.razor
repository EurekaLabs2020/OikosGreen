@inject ProtectedSessionStorage _storage
@inject AuthenticationStateProvider _autenticacion
@inject IModalService _modal
@inject NavigationManager _nav 

    <div class="top-row pl-4 navbar navbar-dark">
        <a class="navbar-brand" href=""><img src="img/islOgo con slogan.png" class="logo-nav" /> OikosGreen</a>
        <button class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>

    <div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
        @if (_lstMenu == null || _lstMenu.Count == 0)
        {
            <p>Cargando Información del Menu...</p>
        }
        else
        {
            <BlazoredMenu Css="menu-ek">
                @foreach (var opPpal in _lstMenu.OrderBy(o => o.code).Where(w => w.idparent == "0" || w.idparent == ""))
                {
                    @if (!_lstMenu.Any(a => a.idparent.Trim() == opPpal.id.Trim()))
                    {
                        <BlazoredMenuItem>
                            <NavLink href="@opPpal.url"><i class="@opPpal.icono"></i> @opPpal.option.ToUpper() </NavLink>
                        </BlazoredMenuItem>
                    }
                    else
                    {
                        <BlazoredSubMenu Header="@opPpal.option.ToUpper()">
                            <MenuTemplate>
                                @foreach (var opHijo in _lstMenu.Where(w => w.idparent.Trim() == opPpal.id.Trim()).OrderBy(o => o.code))
                                {
                                    <BlazoredMenuItem>
                                        <NavLink href="@opHijo.url"><i class="@opHijo.icono"></i> @opHijo.option </NavLink>
                                    </BlazoredMenuItem>
                                }
                            </MenuTemplate>
                        </BlazoredSubMenu>
                    }
                }
            </BlazoredMenu>
        }
    </div>

    @code {

        private bool collapseNavMenu = true;
        private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;
        private List<infoMenu> _lstMenu { get; set; }


        private void ToggleNavMenu()
        {
            collapseNavMenu = !collapseNavMenu;
        }


        protected override async Task OnInitializedAsync()
        {
            infoBrowser userLogueado = null;
            _lstMenu = new List<infoMenu>();
            try
            {

                do
                {
                    var data = await _storage.GetAsync<infoBrowser>("data");
                    userLogueado = data.Value;
                } while (userLogueado == null);
                _lstMenu = userLogueado.menus;
                if (!userLogueado.roles.Any(a => a.rol.Contains("SISTEMAS")))
                    _lstMenu = _lstMenu.Where(w => w.permission.Substring(0, 1) == "1").ToList();

                if (_lstMenu == null || _lstMenu.Count == 0)
                {
                    await General.MensajeModal("Error", "Usuario no tiene un menu asociado.", _modal, _nav);
                    ((CustomAuthentication)_autenticacion).MarkUserAsLoggedOut();
                    //navigation.NavigateTo("/", true);
                }
            }
            catch (Exception ex)
            {
                await General.MensajeModal("Error", "Se presento un error obteniendo el menu del usuario.&s" + ex.Message, _modal, _nav);
            }
            await base.OnInitializedAsync();
        }


    }
